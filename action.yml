# yaml-language-server: $schema=https://json.schemastore.org/github-action.json

name: DNSControl Action
description: DNSControl GitHub Action using configurable GitHub release
author: Eli Heady <eli.heady@gmail.com>

inputs:

  check:
    default: 'false'
    description: Run `dnscontrol check` before any other commands - default is 'false'
    required: false

  version:
    default: 'latest'
    description: Desired version to run (default 'latest')
    required: false

  cmdargs:
    description: DNSControl command and optional arguments
    required: true

  dnsconfig_file:
    default: dnsconfig.js
    description: Path to dnsconfig.js. Defaults to 'dnsconfig.js' (at repository root)
    required: false

  creds_file:
    default: creds.json
    description: Path to creds.json. Defaults to 'creds.json' (at repository root)
    required: false

  output_file:
    default: ''
    description: Write DNSControl output to this file
    required: false

  post_pr_comment:
    default: 'false'
    description: Post the DNSControl output in a PR comment (default 'false')
    required: false

  post_summary:
    default: 'false'
    description: Post the DNSControl output in the step summary (default 'false')
    required: false

outputs:
  output:
    description: DNSControl output
    value: ${{ steps.dnscontrol.outputs.output }}
  output_file:
    description: DNSControl output written to file
    value: ${{ steps.write_file.outputs.output_file }}


runs:
  using: composite
  steps:

    - name: Resolve download URL for latest
      if: ${{ inputs.version == 'latest' }}
      shell: bash
      run: |
        CURL='curl -H user-agent:stackexchange-dnscontrol-action -fsS --retry 5 --retry-max-time 30'
        echo "CURL=$CURL" >>"$GITHUB_ENV"
        URL=$(\
          $CURL -L https://api.github.com/repos/StackExchange/dnscontrol/releases/latest \
          | jq -r '.assets[] | select(.name? | match("dnscontrol_*.*.*_linux_amd64.tar.gz$")) | .browser_download_url'\
        )
        echo "URL=$URL" >>"$GITHUB_ENV"

    - name: Resolve download URL for ${{ inputs.version }}
      if: ${{ inputs.version != 'latest' }}
      shell: bash
      run: |
        URL=$(\
          $CURL -L https://api.github.com/repos/StackExchange/dnscontrol/releases \
          | jq -r '.[] | select(.tag_name == "${{ inputs.version }}") | .assets[] | select(.name? | match("dnscontrol_*.*.*_linux_amd64.tar.gz$")) | .browser_download_url' \
        )
        echo "URL=$URL" >>"$GITHUB_ENV"

    - name: Install DNSControl
      shell: bash
      run: |
        echo "Downloading DNSControl ${{ inputs.version }}"
        $CURL -L "${URL}" \
          | tar -xvzf - dnscontrol
        DNSCONTROL=$(readlink -f dnscontrol)
        echo "DNSCONTROL=$DNSCONTROL" >>"$GITHUB_ENV"
        $DNSCONTROL version

    - name: DNSControl check
      if: ${{ inputs.check == 'true' }}
      continue-on-error: true
      id: check
      shell: bash
      env:
        NO_COLOR: 'true'
      run: |
          set +e
          DNSCONTROL_CMD=$($DNSCONTROL check --config ${{ inputs.dnsconfig_file }})
          err=$?
          export DNSCONTROL_CMD
          DELIMITER="DNSCONTROL-$RANDOM"
          {
            echo "output<<$DELIMITER"
            echo "$DNSCONTROL_CMD"
            echo "$DELIMITER"
          } >>"$GITHUB_OUTPUT"
          echo $DNSCONTROL_CMD
          exit $err

    - name: Check Summary
      # write check output to job summary if check failed
      if: ${{ steps.check.outcome != '' && steps.check.outcome != 'success' }}
      shell: bash
      run: |
        cat >${GITHUB_STEP_SUMMARY}<<EOF
        ${{ steps.check.outputs.output }}
        EOF
        exit 1

    - name: DNSControl
      id: dnscontrol
      # execute only if check was ok or skipped
      if: ${{ inputs.check == false || (inputs.check == 'true' && steps.check.outcome == 'success') }}
      continue-on-error: true
      shell: bash
      env:
        NO_COLOR: 'true'
      run: |
          export DNSCONTROL_CMD=$($DNSCONTROL ${{ inputs.cmdargs }} --config ${{ inputs.dnsconfig_file }} --creds ${{ inputs.creds_file }})
          DELIMITER="DNSCONTROL-$RANDOM"
          {
            echo "output<<$DELIMITER"
            echo "$DNSCONTROL_CMD"
            echo "$DELIMITER"
          } >>"$GITHUB_OUTPUT"
          echo $DNSCONTROL_CMD

    - name: Write output file
      id: write_file
      # execute if user specified an output file AND dnscontrol job ran
      if: ${{ inputs.output_file != '' && steps.dnscontrol.outcome != '' }}
      shell: bash
      env:
        OUTPUT_FILE: ${{ inputs.output_file }}
      run: |
        echo "${{ steps.dnscontrol.outputs.output }}" > $OUTPUT_FILE
        echo "output_file=$OUTPUT_FILE" >>"$GITHUB_OUTPUT"

    - name: Attach Results as PR comment
      uses: thollander/actions-comment-pull-request@24bffb9b452ba05a4f3f77933840a6a841d1b32b # v3.0.1
      # execute if user set post_pr_comment, this is a PR event, AND dnscontrol job ran
      if: ${{ inputs.post_pr_comment && github.event.pull_request.number != '' && steps.dnscontrol.outcome != '' }}
      with:
        comment-tag: dnscontrol_preview_push_external
        message: |
          <details open><summary>Results</summary>

          ### DNSControl Results

          ```
          ${{ steps.dnscontrol.outputs.output }}
          ```
          </details>

    - name: Job Summary
      id: job_summary
      # execute if user set post_summary AND dnscontrol job ran
      if: ${{ inputs.post_summary == 'true' && steps.dnscontrol.outcome != '' }}
      shell: bash
      run: |
        cat >${GITHUB_STEP_SUMMARY}<<EOF
        ${{ steps.dnscontrol.outputs.output }}
        EOF
